# Video Platform Development Environment
# Enhanced docker-compose configuration for private video platform development
version: '3.8'

services:
  # PostgreSQL Database with video platform optimizations
  db:
    image: postgres:15-alpine
    container_name: meatlizard-video-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_DATABASE:-meatlizard_video}
      POSTGRES_USER: ${DATABASE_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password}
      # Performance optimizations for video platform
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_video_data:/var/lib/postgresql/data/
      - ./postgres/init:/docker-entrypoint-initdb.d/
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-postgres} -d ${DATABASE_DATABASE:-meatlizard_video}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - video_platform

  # Redis Cluster for caching and job queues
  redis-master:
    image: redis:7-alpine
    container_name: meatlizard-redis-master
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_master_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - video_platform

  # Redis for job queues (separate instance for better performance)
  redis-jobs:
    image: redis:7-alpine
    container_name: meatlizard-redis-jobs
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy noeviction
    volumes:
      - redis_jobs_data:/data
    ports:
      - "${REDIS_JOBS_PORT:-6380}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - video_platform

  # MinIO S3-compatible storage for development
  minio:
    image: minio/minio:latest
    container_name: meatlizard-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin123}
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - video_platform

  # MinIO Client for bucket setup
  minio-setup:
    image: minio/mc:latest
    container_name: meatlizard-minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 ${S3_ACCESS_KEY:-minioadmin} ${S3_SECRET_KEY:-minioadmin123};
      /usr/bin/mc mb myminio/meatlizard-video-storage --ignore-existing;
      /usr/bin/mc mb myminio/meatlizard-video-transcoded --ignore-existing;
      /usr/bin/mc mb myminio/meatlizard-video-thumbnails --ignore-existing;
      /usr/bin/mc mb myminio/meatlizard-video-hls --ignore-existing;
      /usr/bin/mc policy set public myminio/meatlizard-video-thumbnails;
      /usr/bin/mc policy set public myminio/meatlizard-video-hls;
      echo 'MinIO buckets created successfully';
      "
    networks:
      - video_platform

  # FastAPI Web Server with video platform extensions
  web:
    build:
      context: ..
      dockerfile: infra/video-web.Dockerfile
    container_name: meatlizard-video-web
    restart: unless-stopped
    command: uvicorn server.web.app.main:app --host 0.0.0.0 --port 8000 --reload --workers 1
    volumes:
      - ../server:/app/server
      - ../shared_lib:/app/shared_lib
      - ../test_media:/app/test_media
      - video_uploads:/app/uploads
      - video_temp:/app/temp
    ports:
      - "${WEB_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USERNAME:-postgres}:${DATABASE_PASSWORD:-password}@db:5432/${DATABASE_DATABASE:-meatlizard_video}
      - REDIS_URL=redis://redis-master:6379/0
      - REDIS_JOBS_URL=redis://redis-jobs:6379/0
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-minioadmin}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-minioadmin123}
      - S3_BUCKET_VIDEOS=meatlizard-video-storage
      - S3_BUCKET_TRANSCODED=meatlizard-video-transcoded
      - S3_BUCKET_THUMBNAILS=meatlizard-video-thumbnails
      - S3_BUCKET_HLS=meatlizard-video-hls
      - CDN_BASE_URL=${CDN_BASE_URL:-http://localhost:9000}
      - FFMPEG_PATH=/usr/bin/ffmpeg
      - YTDLP_PATH=/usr/local/bin/yt-dlp
      - ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      redis-jobs:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - video_platform

  # Transcoding Worker Service
  transcoding-worker:
    build:
      context: ..
      dockerfile: infra/transcoding-worker.Dockerfile
    container_name: meatlizard-transcoding-worker
    restart: unless-stopped
    command: python server/run_transcoding_worker.py
    volumes:
      - ../server:/app/server
      - ../shared_lib:/app/shared_lib
      - video_temp:/app/temp
      - /dev/shm:/dev/shm  # Shared memory for FFmpeg
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USERNAME:-postgres}:${DATABASE_PASSWORD:-password}@db:5432/${DATABASE_DATABASE:-meatlizard_video}
      - REDIS_JOBS_URL=redis://redis-jobs:6379/0
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-minioadmin}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-minioadmin123}
      - S3_BUCKET_VIDEOS=meatlizard-video-storage
      - S3_BUCKET_TRANSCODED=meatlizard-video-transcoded
      - S3_BUCKET_HLS=meatlizard-video-hls
      - FFMPEG_PATH=/usr/bin/ffmpeg
      - WORKER_CONCURRENCY=${TRANSCODING_CONCURRENCY:-2}
      - ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
      redis-jobs:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - video_platform

  # Import Worker Service for yt-dlp
  import-worker:
    build:
      context: ..
      dockerfile: infra/import-worker.Dockerfile
    container_name: meatlizard-import-worker
    restart: unless-stopped
    command: python server/run_import_worker.py
    volumes:
      - ../server:/app/server
      - ../shared_lib:/app/shared_lib
      - video_temp:/app/temp
      - import_cache:/app/cache
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USERNAME:-postgres}:${DATABASE_PASSWORD:-password}@db:5432/${DATABASE_DATABASE:-meatlizard_video}
      - REDIS_JOBS_URL=redis://redis-jobs:6379/0
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-minioadmin}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-minioadmin123}
      - S3_BUCKET_VIDEOS=meatlizard-video-storage
      - YTDLP_PATH=/usr/local/bin/yt-dlp
      - YTDLP_CACHE_DIR=/app/cache
      - WORKER_CONCURRENCY=${IMPORT_CONCURRENCY:-1}
      - ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
      redis-jobs:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - video_platform

  # Server Bot with video platform support
  server-bot:
    build:
      context: ..
      dockerfile: infra/server-bot.Dockerfile
    container_name: meatlizard-server-bot
    restart: unless-stopped
    command: python server/server_bot/bot.py
    volumes:
      - ../server:/app/server
      - ../shared_lib:/app/shared_lib
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DATABASE_USERNAME:-postgres}:${DATABASE_PASSWORD:-password}@db:5432/${DATABASE_DATABASE:-meatlizard_video}
      - REDIS_URL=redis://redis-master:6379/0
      - SERVER_BOT_TOKEN=${SERVER_BOT_TOKEN}
      - CLIENT_BOT_ID=${CLIENT_BOT_ID}
      - DISCORD_GUILD_ID=${DISCORD_GUILD_ID}
      - PAYLOAD_ENCRYPTION_KEY=${PAYLOAD_ENCRYPTION_KEY}
      - ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - video_platform

  # Nginx reverse proxy and CDN simulation
  nginx:
    image: nginx:alpine
    container_name: meatlizard-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx_cache:/var/cache/nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      - web
      - minio
    networks:
      - video_platform

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: meatlizard-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - video_platform

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: meatlizard-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - video_platform

volumes:
  postgres_video_data:
  redis_master_data:
  redis_jobs_data:
  minio_data:
  video_uploads:
  video_temp:
  import_cache:
  nginx_cache:
  prometheus_data:
  grafana_data:

networks:
  video_platform:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16