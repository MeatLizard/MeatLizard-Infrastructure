# Promtail Configuration for Video Platform Log Collection
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Docker container logs
  - job_name: docker-containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/meatlizard-(.*)'
        target_label: 'container'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'service'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: 'project'
    pipeline_stages:
      # Parse JSON logs from FastAPI
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            module: module
            request_id: request_id
      
      # Parse timestamp
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      
      # Add labels based on log content
      - labels:
          level:
          module:
          service:
      
      # Drop debug logs in production
      - drop:
          expression: '.*level="DEBUG".*'
          drop_counter_reason: debug_logs_dropped

  # FastAPI application logs
  - job_name: fastapi-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: fastapi
          __path__: /var/log/fastapi/*.log
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            module: module
            request_id: request_id
            user_id: user_id
            endpoint: endpoint
            method: method
            status_code: status_code
            duration: duration
      
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      
      - labels:
          level:
          module:
          endpoint:
          method:
          status_code:

  # Transcoding worker logs
  - job_name: transcoding-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: transcoding
          __path__: /var/log/transcoding/*.log
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            video_id: video_id
            job_id: job_id
            quality: quality
            progress: progress
            ffmpeg_cmd: ffmpeg_cmd
      
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      
      - labels:
          level:
          quality:
          job_id:

  # Import worker logs
  - job_name: import-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: import
          __path__: /var/log/import/*.log
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            import_id: import_id
            source_url: source_url
            platform: platform
            status: status
            ytdlp_output: ytdlp_output
      
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      
      - labels:
          level:
          platform:
          status:

  # Nginx access logs
  - job_name: nginx-access
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-access
          __path__: /var/log/nginx/access.log
    pipeline_stages:
      - regex:
          expression: '^(?P<remote_addr>\S+) - (?P<remote_user>\S+) \[(?P<time_local>[^\]]+)\] "(?P<method>\S+) (?P<path>\S+) (?P<protocol>\S+)" (?P<status>\d+) (?P<body_bytes_sent>\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)" "(?P<http_x_forwarded_for>[^"]*)" rt=(?P<request_time>\S+) uct="(?P<upstream_connect_time>\S+)" uht="(?P<upstream_header_time>\S+)" urt="(?P<upstream_response_time>\S+)"'
      
      - timestamp:
          source: time_local
          format: '02/Jan/2006:15:04:05 -0700'
      
      - labels:
          method:
          status:
          path:

  # Nginx error logs
  - job_name: nginx-error
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx-error
          __path__: /var/log/nginx/error.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<level>\w+)\] (?P<pid>\d+)#(?P<tid>\d+): (?P<message>.*)'
      
      - timestamp:
          source: timestamp
          format: '2006/01/02 15:04:05'
      
      - labels:
          level:

  # PostgreSQL logs
  - job_name: postgresql
    static_configs:
      - targets:
          - localhost
        labels:
          job: postgresql
          __path__: /var/log/postgresql/*.log
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3} \w+) \[(?P<pid>\d+)\]: \[(?P<line_num>\d+)-1\] user=(?P<user>\w+),db=(?P<database>\w+),app=(?P<application>\w+),client=(?P<client>\S+) (?P<level>\w+): (?P<message>.*)'
      
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05.000 MST'
      
      - labels:
          level:
          database:
          user:

  # Redis logs
  - job_name: redis
    static_configs:
      - targets:
          - localhost
        labels:
          job: redis
          __path__: /var/log/redis/*.log
    pipeline_stages:
      - regex:
          expression: '^(?P<pid>\d+):(?P<role>\w+) (?P<timestamp>\d{2} \w{3} \d{4} \d{2}:\d{2}:\d{2}\.\d{3}) (?P<level>\w+) (?P<message>.*)'
      
      - timestamp:
          source: timestamp
          format: '02 Jan 2006 15:04:05.000'
      
      - labels:
          level:
          role:

  # System logs (syslog)
  - job_name: syslog
    static_configs:
      - targets:
          - localhost
        labels:
          job: syslog
          __path__: /var/log/syslog
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\w{3} \d{1,2} \d{2}:\d{2}:\d{2}) (?P<hostname>\S+) (?P<process>\S+): (?P<message>.*)'
      
      - timestamp:
          source: timestamp
          format: 'Jan 2 15:04:05'
      
      - labels:
          hostname:
          process: