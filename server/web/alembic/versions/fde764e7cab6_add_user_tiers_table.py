"""Alembic script template.

This template is used by Alembic to generate new migration files.
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from web.app.models import GUID

# revision identifiers, used by Alembic.
revision = 'fde764e7cab6'
down_revision = '3cbf9f879422'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('discord_linked_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('login_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('custom_domain', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('email_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('password_reset_expires', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('email_verification_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('vanity_slug', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('discord_id', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('discord_username', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('password_reset_token', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.create_unique_constraint('users_vanity_slug_key', 'users', ['vanity_slug'])
    op.create_unique_constraint('users_discord_id_key', 'users', ['discord_id'])
    op.create_unique_constraint('users_custom_domain_key', 'users', ['custom_domain'])
    op.create_unique_constraint('unique_user_email', 'users', ['email'])
    op.create_index('idx_users_last_login', 'users', ['last_login'], unique=False)
    op.create_index('idx_users_email_verified', 'users', ['email_verified'], unique=False)
    op.create_index('idx_users_email', 'users', ['email'], unique=False)
    op.create_index('idx_users_discord_username', 'users', ['discord_username'], unique=False)
    op.create_index('idx_users_discord_id', 'users', ['discord_id'], unique=False)
    op.create_index('idx_users_active', 'users', ['is_active'], unique=False)
    op.add_column('user_tiers', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False))
    op.add_column('user_tiers', sa.Column('subscription_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('user_tiers', sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('user_tiers', sa.Column('auto_renew', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('user_tiers', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('user_tiers', sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('user_tiers', sa.Column('payment_method_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_user_tiers_user_id'), table_name='user_tiers')
    op.create_index('idx_user_tiers_user_id', 'user_tiers', ['user_id'], unique=False)
    op.create_index('idx_user_tiers_tier', 'user_tiers', ['tier'], unique=False)
    op.create_index('idx_user_tiers_expires', 'user_tiers', ['expires_at'], unique=False)
    op.create_index('idx_user_tiers_active', 'user_tiers', ['is_active'], unique=False)
    op.alter_column('user_tiers', 'tier',
               existing_type=sa.Enum('guest', 'free', 'vip', 'paid', 'business', name='usertierenum'),
               type_=postgresql.ENUM('guest', 'free', 'vip', 'paid', 'business', name='usertier'),
               existing_nullable=False)
    op.drop_column('user_tiers', 'end_date')
    op.drop_column('user_tiers', 'start_date')
    op.add_column('url_shortener', sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('tier_configurations', sa.Column('advanced_features', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('storage_quota_bytes', sa.BIGINT(), server_default=sa.text("'0'::bigint"), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('support_level', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('transcript_retention_days', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('priority_queue_access', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('max_concurrent_sessions', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('pastebin_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('max_pastes', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('tier_configurations', sa.Column('max_paste_ttl_days', sa.INTEGER(), server_default=sa.text('30'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('messages_per_month', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('restrictions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('messages_per_hour', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('messages_per_day', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('price_monthly', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
    op.add_column('tier_configurations', sa.Column('max_short_urls', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('media_storage_quota_gb', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('price_yearly', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
    op.add_column('tier_configurations', sa.Column('max_file_size_bytes', sa.BIGINT(), server_default=sa.text("'0'::bigint"), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('features', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('api_access', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('url_shortener_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('private_pastes', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('max_message_length', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('media_upload_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('tier_configurations', sa.Column('custom_vanity_slugs', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.alter_column('tier_configurations', 'tier',
               existing_type=sa.Enum('guest', 'free', 'vip', 'paid', 'business', name='usertierenum'),
               type_=postgresql.ENUM('guest', 'free', 'vip', 'paid', 'business', name='usertier'),
               existing_nullable=False)
    op.add_column('reactions', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('playlists', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('playlists', sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('playlists', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'playlists', type_='foreignkey')
    op.create_foreign_key('playlists_user_id_fkey', 'playlists', 'users', ['user_id'], ['id'])
    op.create_index('idx_playlists_user', 'playlists', ['user_id'], unique=False)
    op.create_index('idx_playlists_public', 'playlists', ['is_public'], unique=False)
    op.create_index('idx_playlists_created', 'playlists', ['created_at'], unique=False)
    op.add_column('playlist_items', sa.Column('added_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_playlist_items_playlist_id'), table_name='playlist_items')
    op.drop_index(op.f('ix_playlist_items_media_file_id'), table_name='playlist_items')
    op.create_index('idx_playlist_items_position', 'playlist_items', ['position'], unique=False)
    op.create_index('idx_playlist_items_playlist', 'playlist_items', ['playlist_id'], unique=False)
    op.create_index('idx_playlist_items_media', 'playlist_items', ['media_file_id'], unique=False)
    op.add_column('pastes', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('pastes', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False))
    op.add_column('pastes', sa.Column('privacy_level', postgresql.ENUM('public', 'private', 'password', name='pasteprivacylevel'), server_default=sa.text("'public'::pasteprivacylevel"), autoincrement=False, nullable=False))
    op.add_column('pastes', sa.Column('current_views', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('pastes', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.add_column('pastes', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'pastes', type_='foreignkey')
    op.create_foreign_key('pastes_user_id_fkey', 'pastes', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_pastes_paste_id'), table_name='pastes')
    op.drop_index('ix_pastes_expires_at', table_name='pastes', postgresql_where=sa.text('expires_at IS NOT NULL'))
    op.create_unique_constraint('pastes_paste_id_key', 'pastes', ['paste_id'])
    op.create_index('idx_pastes_user', 'pastes', ['user_id'], unique=False)
    op.create_index('idx_pastes_privacy', 'pastes', ['privacy_level'], unique=False)
    op.create_index('idx_pastes_paste_id', 'pastes', ['paste_id'], unique=False)
    op.create_index('idx_pastes_expires', 'pastes', ['expires_at'], unique=False)
    op.create_index('idx_pastes_created', 'pastes', ['created_at'], unique=False)
    op.create_index('idx_pastes_active', 'pastes', ['is_active'], unique=False)
    op.add_column('media_files', sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('media_files', sa.Column('transcoding_error', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('media_files', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False))
    op.add_column('media_files', sa.Column('privacy_level', postgresql.ENUM('public', 'private', 'password', name='pasteprivacylevel'), server_default=sa.text("'public'::pasteprivacylevel"), autoincrement=False, nullable=False))
    op.add_column('media_files', sa.Column('duration_seconds', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('media_files', sa.Column('transcoding_status', postgresql.ENUM('pending', 'processing', 'completed', 'failed', name='transcodingstatusenum'), autoincrement=False, nullable=False))
    op.add_column('media_files', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('media_files', sa.Column('height', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('media_files', sa.Column('processing_status', postgresql.ENUM('pending', 'processing', 'completed', 'failed', name='mediaprocessingstatus'), server_default=sa.text("'pending'::mediaprocessingstatus"), autoincrement=False, nullable=False))
    op.add_column('media_files', sa.Column('transcoded_files', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('media_files', sa.Column('thumbnail_path', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('media_files', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.add_column('media_files', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('media_files', sa.Column('hls_playlist_path', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('media_files', sa.Column('width', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('media_files', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'media_files', type_='foreignkey')
    op.create_foreign_key('media_files_user_id_fkey', 'media_files', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_media_files_media_id'), table_name='media_files')
    op.create_unique_constraint('media_files_media_id_key', 'media_files', ['media_id'])
    op.create_index('idx_media_files_user', 'media_files', ['user_id'], unique=False)
    op.create_index('idx_media_files_status', 'media_files', ['processing_status'], unique=False)
    op.create_index('idx_media_files_privacy', 'media_files', ['privacy_level'], unique=False)
    op.create_index('idx_media_files_mime_type', 'media_files', ['mime_type'], unique=False)
    op.create_index('idx_media_files_media_id', 'media_files', ['media_id'], unique=False)
    op.create_index('idx_media_files_created', 'media_files', ['created_at'], unique=False)
    op.create_index('idx_media_files_active', 'media_files', ['is_active'], unique=False)
    op.add_column('leaderboard_entries', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('content', sa.Column('moderation_flags', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('analytics_events', sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True))
    op.add_column('analytics_events', sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('ai_chat_messages', sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_table('rate_limits',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('requests_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('window_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('window_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('tier', postgresql.ENUM('guest', 'free', 'vip', 'paid', 'business', name='usertier'), autoincrement=False, nullable=False),
    sa.Column('limit_exceeded', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='rate_limits_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rate_limits_pkey')
    )
    op.create_index('idx_rate_limits_window', 'rate_limits', ['window_start', 'window_end'], unique=False)
    op.create_index('idx_rate_limits_user_endpoint', 'rate_limits', ['user_id', 'endpoint'], unique=False)
    op.create_index('idx_rate_limits_tier', 'rate_limits', ['tier'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='audit_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.create_index('idx_audit_logs_user', 'audit_logs', ['user_id'], unique=False)
    op.create_index('idx_audit_logs_timestamp', 'audit_logs', ['timestamp'], unique=False)
    op.create_index('idx_audit_logs_resource', 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_audit_logs_action', 'audit_logs', ['action'], unique=False)
    op.create_table('email_prompt_templates',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('prompt_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('chain_of_thought', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('tier_access', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text('\'["business"]\'::jsonb'), autoincrement=False, nullable=False),
    sa.Column('automation_ready', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('success_rate', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0'::double precision"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='email_prompt_templates_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_prompt_templates_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_email_prompt_templates_usage', 'email_prompt_templates', ['usage_count'], unique=False)
    op.create_index('idx_email_prompt_templates_tier_access', 'email_prompt_templates', ['tier_access'], unique=False)
    op.create_index('idx_email_prompt_templates_category', 'email_prompt_templates', ['category'], unique=False)
    op.create_index('idx_email_prompt_templates_active', 'email_prompt_templates', ['is_active'], unique=False)
    op.create_table('email_folders',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('folder_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('folder_type', postgresql.ENUM('inbox', 'sent', 'drafts', 'trash', 'spam', 'custom', name='emailfoldertype'), server_default=sa.text("'custom'::emailfoldertype"), autoincrement=False, nullable=False),
    sa.Column('parent_folder_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('message_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('unread_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['email_account_id'], ['email_accounts.id'], name='email_folders_email_account_id_fkey'),
    sa.ForeignKeyConstraint(['parent_folder_id'], ['email_folders.id'], name='email_folders_parent_folder_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_folders_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_email_folders_type', 'email_folders', ['folder_type'], unique=False)
    op.create_index('idx_email_folders_parent', 'email_folders', ['parent_folder_id'], unique=False)
    op.create_index('idx_email_folders_account', 'email_folders', ['email_account_id'], unique=False)
    op.create_table('backup_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('backup_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('started', 'in_progress', 'completed', 'failed', name='backupstatus'), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('file_size_bytes', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='backup_logs_pkey')
    )
    op.create_index('idx_backup_logs_type', 'backup_logs', ['backup_type'], unique=False)
    op.create_index('idx_backup_logs_status', 'backup_logs', ['status'], unique=False)
    op.create_index('idx_backup_logs_started_at', 'backup_logs', ['started_at'], unique=False)
    op.create_table('email_contacts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email_address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('organization', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_favorite', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='email_contacts_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_contacts_pkey')
    )
    op.create_index('idx_email_contacts_user', 'email_contacts', ['user_id'], unique=False)
    op.create_index('idx_email_contacts_name', 'email_contacts', ['display_name'], unique=False)
    op.create_index('idx_email_contacts_email', 'email_contacts', ['email_address'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('request_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('user', 'assistant', 'system', name='messagerole'), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('encrypted_content', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name='messages_session_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='messages_pkey'),
    sa.UniqueConstraint('request_id', name='messages_request_id_key')
    )
    op.create_index('idx_messages_timestamp', 'messages', ['timestamp'], unique=False)
    op.create_index('idx_messages_session', 'messages', ['session_id'], unique=False)
    op.create_index('idx_messages_role', 'messages', ['role'], unique=False)
    op.create_index('idx_messages_request_id', 'messages', ['request_id'], unique=False)
    op.create_table('email_generation_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('scheduled_email_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('prompt_used', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('variables_used', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('generated_content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('generation_time_ms', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tokens_used', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('quality_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('success', 'failed', 'timeout', 'rejected', name='generationstatus'), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['scheduled_email_id'], ['scheduled_emails.id'], name='email_generation_logs_scheduled_email_id_fkey'),
    sa.ForeignKeyConstraint(['template_id'], ['email_prompt_templates.id'], name='email_generation_logs_template_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='email_generation_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_generation_logs_pkey')
    )
    op.create_index('idx_email_generation_logs_user', 'email_generation_logs', ['user_id'], unique=False)
    op.create_index('idx_email_generation_logs_template', 'email_generation_logs', ['template_id'], unique=False)
    op.create_index('idx_email_generation_logs_status', 'email_generation_logs', ['status'], unique=False)
    op.create_index('idx_email_generation_logs_created', 'email_generation_logs', ['created_at'], unique=False)
    op.create_table('user_storage_usage',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('used_bytes', sa.BIGINT(), server_default=sa.text("'0'::bigint"), autoincrement=False, nullable=False),
    sa.Column('quota_bytes', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('last_calculated', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_storage_usage_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', name='user_storage_usage_pkey')
    )
    op.create_index('idx_user_storage_usage_user', 'user_storage_usage', ['user_id'], unique=False)
    op.create_index('idx_user_storage_usage_calculated', 'user_storage_usage', ['last_calculated'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('owner_user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('origin', postgresql.ENUM('website', 'discord', name='sessionorigin'), autoincrement=False, nullable=False),
    sa.Column('discord_channel_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('system_prompt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('ended_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_user_id'], ['users.id'], name='sessions_owner_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey'),
    sa.UniqueConstraint('discord_channel_id', name='sessions_discord_channel_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_sessions_owner', 'sessions', ['owner_user_id'], unique=False)
    op.create_index('idx_sessions_origin', 'sessions', ['origin'], unique=False)
    op.create_index('idx_sessions_discord_channel', 'sessions', ['discord_channel_id'], unique=False)
    op.create_index('idx_sessions_created_at', 'sessions', ['created_at'], unique=False)
    op.create_index('idx_sessions_active', 'sessions', ['is_active'], unique=False)
    op.create_table('media_likes',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('media_file_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_like', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['media_file_id'], ['media_files.id'], name='media_likes_media_file_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='media_likes_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='media_likes_pkey'),
    sa.UniqueConstraint('media_file_id', 'user_id', name='unique_media_user_like')
    )
    op.create_index('idx_media_likes_user', 'media_likes', ['user_id'], unique=False)
    op.create_index('idx_media_likes_media', 'media_likes', ['media_file_id'], unique=False)
    op.create_index('idx_media_likes_created', 'media_likes', ['created_at'], unique=False)
    op.create_table('media_comments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('media_file_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_approved', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['media_file_id'], ['media_files.id'], name='media_comments_media_file_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='media_comments_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='media_comments_pkey')
    )
    op.create_index('idx_media_comments_user', 'media_comments', ['user_id'], unique=False)
    op.create_index('idx_media_comments_media', 'media_comments', ['media_file_id'], unique=False)
    op.create_index('idx_media_comments_created', 'media_comments', ['created_at'], unique=False)
    op.create_index('idx_media_comments_approved', 'media_comments', ['is_approved'], unique=False)
    op.create_table('short_urls',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('slug', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('target_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_custom_slug', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('max_clicks', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('current_clicks', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='short_urls_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='short_urls_pkey'),
    sa.UniqueConstraint('slug', name='short_urls_slug_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_short_urls_user', 'short_urls', ['user_id'], unique=False)
    op.create_index('idx_short_urls_slug', 'short_urls', ['slug'], unique=False)
    op.create_index('idx_short_urls_expires', 'short_urls', ['expires_at'], unique=False)
    op.create_index('idx_short_urls_created', 'short_urls', ['created_at'], unique=False)
    op.create_index('idx_short_urls_active', 'short_urls', ['is_active'], unique=False)
    op.create_table('scheduled_emails',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('recipient_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('recipient_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('subject', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('generated_content_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('generated_content_html', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scheduled_for', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('optimal_send_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('time_zone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('draft', 'scheduled', 'generating', 'ready', 'sent', 'failed', 'cancelled', name='scheduledemailstatus'), server_default=sa.text("'draft'::scheduledemailstatus"), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sent_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['email_account_id'], ['email_accounts.id'], name='scheduled_emails_email_account_id_fkey'),
    sa.ForeignKeyConstraint(['template_id'], ['email_prompt_templates.id'], name='scheduled_emails_template_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='scheduled_emails_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='scheduled_emails_pkey')
    )
    op.create_index('idx_scheduled_emails_user', 'scheduled_emails', ['user_id'], unique=False)
    op.create_index('idx_scheduled_emails_status', 'scheduled_emails', ['status'], unique=False)
    op.create_index('idx_scheduled_emails_scheduled_for', 'scheduled_emails', ['scheduled_for'], unique=False)
    op.create_index('idx_scheduled_emails_priority', 'scheduled_emails', ['priority'], unique=False)
    op.create_index('idx_scheduled_emails_optimal_time', 'scheduled_emails', ['optimal_send_time'], unique=False)
    op.create_table('payment_transactions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('transaction_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('payment_provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=False),
    sa.Column('tier_purchased', postgresql.ENUM('guest', 'free', 'vip', 'paid', 'business', name='usertier'), autoincrement=False, nullable=False),
    sa.Column('billing_period', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'completed', 'failed', 'refunded', 'cancelled', name='paymentstatus'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='payment_transactions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payment_transactions_pkey'),
    sa.UniqueConstraint('transaction_id', name='unique_transaction_id')
    )
    op.create_index('idx_payment_transactions_user', 'payment_transactions', ['user_id'], unique=False)
    op.create_index('idx_payment_transactions_status', 'payment_transactions', ['status'], unique=False)
    op.create_index('idx_payment_transactions_created', 'payment_transactions', ['created_at'], unique=False)
    op.create_table('system_configs',
    sa.Column('key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='system_configs_updated_by_fkey'),
    sa.PrimaryKeyConstraint('key', name='system_configs_pkey')
    )
    op.create_table('email_messages',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email_account_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('folder_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('message_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('thread_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('from_address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('to_addresses', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('cc_addresses', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('bcc_addresses', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('subject', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('body_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('body_html', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('attachments', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_starred', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_draft', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('size_bytes', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('received_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('sent_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['email_account_id'], ['email_accounts.id'], name='email_messages_email_account_id_fkey'),
    sa.ForeignKeyConstraint(['folder_id'], ['email_folders.id'], name='email_messages_folder_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_messages_pkey')
    )
    op.create_index('idx_email_messages_thread', 'email_messages', ['thread_id'], unique=False)
    op.create_index('idx_email_messages_received', 'email_messages', ['received_at'], unique=False)
    op.create_index('idx_email_messages_read', 'email_messages', ['is_read'], unique=False)
    op.create_index('idx_email_messages_from', 'email_messages', ['from_address'], unique=False)
    op.create_index('idx_email_messages_folder', 'email_messages', ['folder_id'], unique=False)
    op.create_index('idx_email_messages_account', 'email_messages', ['email_account_id'], unique=False)
    op.create_table('transcripts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('s3_key', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('format', postgresql.ENUM('json', 'csv', name='transcriptformat'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('file_size_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('message_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name='transcripts_session_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transcripts_pkey')
    )
    op.create_index('idx_transcripts_session', 'transcripts', ['session_id'], unique=False)
    op.create_index('idx_transcripts_format', 'transcripts', ['format'], unique=False)
    op.create_index('idx_transcripts_created_at', 'transcripts', ['created_at'], unique=False)
    op.create_table('short_url_access_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('short_url_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('ip_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('referrer', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country_code', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('accessed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['short_url_id'], ['short_urls.id'], name='short_url_access_logs_short_url_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='short_url_access_logs_pkey')
    )
    op.create_index('idx_short_url_access_logs_url', 'short_url_access_logs', ['short_url_id'], unique=False)
    op.create_index('idx_short_url_access_logs_ip', 'short_url_access_logs', ['ip_hash'], unique=False)
    op.create_index('idx_short_url_access_logs_accessed', 'short_url_access_logs', ['accessed_at'], unique=False)
    op.create_table('email_personalization_rules',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rule_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('actions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='email_personalization_rules_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_personalization_rules_pkey')
    )
    op.create_index('idx_email_personalization_rules_user', 'email_personalization_rules', ['user_id'], unique=False)
    op.create_index('idx_email_personalization_rules_priority', 'email_personalization_rules', ['priority'], unique=False)
    op.create_index('idx_email_personalization_rules_active', 'email_personalization_rules', ['is_active'], unique=False)
    op.create_table('email_ab_tests',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('test_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('hypothesis', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('variant_a_template_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('variant_b_template_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('traffic_split', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0.5'::double precision"), autoincrement=False, nullable=False),
    sa.Column('success_metric', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('confidence_level', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text("'0.95'::double precision"), autoincrement=False, nullable=False),
    sa.Column('minimum_sample_size', sa.INTEGER(), server_default=sa.text('100'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('draft', 'running', 'completed', 'stopped', name='abtestatus'), server_default=sa.text("'draft'::abtestatus"), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('winner_variant', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('statistical_significance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='email_ab_tests_user_id_fkey'),
    sa.ForeignKeyConstraint(['variant_a_template_id'], ['email_prompt_templates.id'], name='email_ab_tests_variant_a_template_id_fkey'),
    sa.ForeignKeyConstraint(['variant_b_template_id'], ['email_prompt_templates.id'], name='email_ab_tests_variant_b_template_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_ab_tests_pkey')
    )
    op.create_index('idx_email_ab_tests_user', 'email_ab_tests', ['user_id'], unique=False)
    op.create_index('idx_email_ab_tests_status', 'email_ab_tests', ['status'], unique=False)
    op.create_index('idx_email_ab_tests_dates', 'email_ab_tests', ['start_date', 'end_date'], unique=False)
    op.create_table('user_usage_stats',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('messages_sent', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('ai_responses_received', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('sessions_created', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('total_tokens_used', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('premium_features_used', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('api_calls_made', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('tier_at_time', postgresql.ENUM('guest', 'free', 'vip', 'paid', 'business', name='usertier'), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_usage_stats_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_usage_stats_pkey'),
    sa.UniqueConstraint('user_id', 'date', name='unique_user_date_stats')
    )
    op.create_index('idx_usage_stats_user_date', 'user_usage_stats', ['user_id', 'date'], unique=False)
    op.create_index('idx_usage_stats_tier', 'user_usage_stats', ['tier_at_time'], unique=False)
    op.create_index('idx_usage_stats_date', 'user_usage_stats', ['date'], unique=False)
    op.create_table('email_workflows',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('workflow_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('workflow_type', postgresql.ENUM('chain_of_thought', 'behavioral_trigger', 'recurring_campaign', 'ab_test', name='emailworkflowtype'), autoincrement=False, nullable=False),
    sa.Column('steps', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('trigger_conditions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('schedule_config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('execution_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('success_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('last_executed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('next_execution', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='email_workflows_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_workflows_pkey')
    )
    op.create_index('idx_email_workflows_user', 'email_workflows', ['user_id'], unique=False)
    op.create_index('idx_email_workflows_type', 'email_workflows', ['workflow_type'], unique=False)
    op.create_index('idx_email_workflows_next_execution', 'email_workflows', ['next_execution'], unique=False)
    op.create_index('idx_email_workflows_active', 'email_workflows', ['is_active'], unique=False)
    op.create_table('email_accounts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email_address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('quota_bytes', sa.BIGINT(), server_default=sa.text("'0'::bigint"), autoincrement=False, nullable=False),
    sa.Column('used_bytes', sa.BIGINT(), server_default=sa.text("'0'::bigint"), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_activity', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='email_accounts_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_accounts_pkey'),
    sa.UniqueConstraint('email_address', name='unique_email_address')
    )
    op.create_index('idx_email_accounts_user', 'email_accounts', ['user_id'], unique=False)
    op.create_index('idx_email_accounts_last_login', 'email_accounts', ['last_login'], unique=False)
    op.create_index('idx_email_accounts_active', 'email_accounts', ['is_active'], unique=False)
    op.create_table('email_aliases',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('alias_address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('destination_address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='email_aliases_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_aliases_pkey'),
    sa.UniqueConstraint('alias_address', name='unique_alias_address')
    )
    op.create_index('idx_email_aliases_user', 'email_aliases', ['user_id'], unique=False)
    op.create_index('idx_email_aliases_destination', 'email_aliases', ['destination_address'], unique=False)
    op.create_index('idx_email_aliases_active', 'email_aliases', ['is_active'], unique=False)
    op.create_table('metrics',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('client_bot_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metric_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('metric_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='metrics_pkey')
    )
    op.create_index('idx_metrics_type', 'metrics', ['metric_type'], unique=False)
    op.create_index('idx_metrics_timestamp', 'metrics', ['timestamp'], unique=False)
    op.create_index('idx_metrics_client_bot', 'metrics', ['client_bot_id'], unique=False)
    op.create_table('email_templates',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('template_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('subject_template', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('body_template', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_html', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('is_default', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='email_templates_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_templates_pkey')
    )
    op.create_index('idx_email_templates_user', 'email_templates', ['user_id'], unique=False)
    op.create_index('idx_email_templates_default', 'email_templates', ['is_default'], unique=False)
    op.create_table('paste_access_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('paste_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('ip_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('accessed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['paste_id'], ['pastes.id'], name='paste_access_logs_paste_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='paste_access_logs_pkey')
    )
    op.create_index('idx_paste_access_logs_paste', 'paste_access_logs', ['paste_id'], unique=False)
    op.create_index('idx_paste_access_logs_accessed', 'paste_access_logs', ['accessed_at'], unique=False)
    # ### end Alembic commands ###
